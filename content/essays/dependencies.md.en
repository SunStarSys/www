Title: What Is <em>Smart Content Dependency Management&trade;</em> All About?
Dependencies: *.md.en
Categories: CMS, Architecture

[TOC]

## Abstract

*Smart Content Dependency Management&trade;* is <!-- #teaser -->about the circle of ideas related to providing support for *incremental builds*, while staying true to the **Highlander** principle<!-- #teaser --> &mdash; that permalinks should be the single source of truth, no matter how their content is curated throughout the source tree.

## Weaving Your Website's Information Topology Together

Mathematically, a *Topology* `$$\tau$$` is a complete specification of the *open* subsets of a space `$$X$$`, the purpose of which is to indicate the spatial relationships between *points* of the space `$$X$$`.  When `$$X$$` is a graph, a *topology* `$$\tau$$` for `$$X$$` amounts to specifying the edges connecting the vertices of the graph together (here vertices are viewed as the *points* of `$$X$$`, and the connecting edges represent the neighborhoods of those points as *basis open sets* for the topoology).  A *directed graph topology* is essentially the same thing, but incorporates a reference to a topological embedding of `$$(X,\tau)$$` into a larger topological space `$$(Y,\sigma)$$` , where the embedding's edge connections are represented by directional, non-intersecting (Jordan) curves.

The latter specification is what we will utilize when discussing the *information topology* `$$\tau$$` associated to the space `$$X$$` of source files beneath your site's `content/` subdirectory (here `$$(Y,\sigma)$$` is `$$\mathbb{R}^n$$` with its metric topology for `$$n \in \{2,3\}$$`, and the edges of `$$X$$` are non-intersecting, directed Jordan curves connecting a file `$$x \in X$$` to its set of files upon which `$$x$$` depends: `$$\{x' \in X | x \rightarrow x' \}$$`).

Having a clear understanding of your website's full *information topology* will ensure you can maximize the performance of our incremental build technology at scale. We take the information you provide in `%path::dependencies` and construct a reverse map of dependent files, and use *that* to determine the full corpus of files to build for any given `svn commit` you make to our system.

It's important to note that the dependency relationships between source files can and should be fully captured by the `%path::dependendies` hash during the build-system's startup load of `lib/path.pm` from your source tree, which is how the built-in views contained in the `SunStarSys::View` package are intended to operate. The `walk_content_tree`, `archived`, and `seed_deps` utility functions in `SunStarSys::Util` are useful aids in constructing the `%path::dependencies` hash, with built-in support for managing a dependency cache to accelerate incremental builds at scale.

### Cyclic Dependency Graphs Are the Norm

Here's a link to a two-dimensional directed graph representation of a recent snapshot of the English language page dependencies on **this site**:

[English Language Dependencies](../images/deps.svg.gz.en)

Quite complex, even for a small website like this one! Lots of intesections when taking `$$n=2$$`. Of particular note is the core set of dense, cyclic dependencies in the non-archived files in `/essays/` towards the center-right of the graph, which is what a good blogging site's information topology should look like.

### More than just Hyperlinks

### How SSI Technology Can Help

#### Traditional Server-Side Includes

- great for pruning your website's *information topology* down to manageable size
- great for decreasing boilerplate churn in large commit messages
- bad for recontexualizing entire webpages into a different location in your document root's heirarchy

#### Template APIs

##### ssi tag

- paths rooted at `content` source directory
- rewrites relative urls to absolute urls in the target path's included content

##### ssi filter

- recursively evaluates ssi tags in the value to be filtered
- useful for avoiding using a large value (3+) of `quick_deps` in a `@{path::patterns}` entry's argument hashref

#### Why not SymLinks?

- barebones filesystem abstraction that is hard to securely support in a vhost context
- same downsides with traditional ssi includes on full webpages
- CMS system does not support them

#### Build Tools for Permalinks: Document Curation, Category Generation, and Archived Pages

##### Categories

- strictly additive (i.e., removing a category from a source page's headers will not remove it from that category on the live site),
- generated on demand
- deleting all categories in a single commit is a great way to resync them with
  the exact specifications in the source page's headers, without destroying preserved category content on the live site

##### Archived Pages

- we aggresssively archive stale essays to keep build times for new essays low
- content in `/(essays|clients)/` are always permalinks, even after archiving
- archiving effectively removes the permalink location from the *information topology*, while not removing the permalink itself from the website

## Teasers

HTML comments embedded in the Markdown prose form boundaries of the teaser content. We use &lt;!-- #teaser --&gt; for this purpose.

## Footnotes

1. [On the benefits and limits of incremental build software configurations: an exploratory study](https://dl.acm.org/doi/abs/10.1145/3510003.3510190) ICSE '22: Proceedings of the 44th International Conference on Software Engineering May 2022

*$Date$*
