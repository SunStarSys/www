Title: Perl 7 Feature Request: sealed subs for typed lexicals
Keywords: perl,dylan,static,method,lookup,compile,sealed
Dependencies: *.md.en

<div class="right">
  <img src="../images/sunstarstaronly.png">
</div>

## The Problem

<!-- #teaser -->Perl 5's OO runtime method lookup has 50% more performance overhead than a direct, named subroutine invocation.<!-- #teaser -->

## The initial solution: Doug MacEachern's method lookup optimizations

Doug was the creator of the mod_perl project back in the mid-90s, so obviously writing high performance Perl was his fort√©. One of his many contributions to [p5p](https://lists.perl.org/list/perl5-porters.html) was to cut the performance penalty of OO method lookup overhead in half, by using a method + <code>&#64;ISA</code> heirarchy cache to make the runtime object method lookup for mod_perl objects like `Apache2::RequestRec` as streamlined as possible.  But it only gets us half-way there.

This isn't a trifling issue with calls to `C struct` get-set accessor methods &mdash; the common situation with many mod_perl APIs.  Perl's runtime method-call lookup penalty on httpd's `struct request_rec *`, that mod_perl exposes via the `Apache2::RequestRec` module, is on the same order of magnitude of the full execution of the call.  For mod_perl backed sites making millions of XS method calls a second, this is an awful waste of precious CPU cycles.

What Doug was looking for was a way to tell Perl 5 to perform the method lookup at compile time, the way it does with named subroutine calls.  Every time Doug tried, he hit roadblocks of either a social or technical nature.  Perhaps it's time to make another pass at this idea with the advent of Perl 7.

## [Benchmark script]({{snippetA.pretty_uri}})

[snippet:repo=SunStarSys/sealed:path=t/bench.pl:lines=1,50:lang=perl]

## Benchmark results

```perl
1..1
sealed: compiling main->foo lookup.
{
    use strict;
    $y->;
}
sealed: compiling Benchmark->cmpthese lookup.
sealed: compiling Foo->foo lookup.
sealed: compiling main->foo lookup.
{
    use strict;
    my Foo $b = $a;
    $inner->foo($b->($inner->bar, $inner, $bench->));
    $a->;
}
sealed: compiling main->foo lookup.
{
    use strict;
    my main $b = $a;
    (local our(@Q)) = 1;
    $b->;
}
sealed: compiling main->bar lookup.
{
    use strict;
    my main $a = shift();
    if ($a) {
        my Benchmark $bench;
        my $inner = $a;
        return sub {
            my Foo $b = $a;
            $inner->foo($b->($inner->bar, $inner, $bench->));
            $a->;
        }
        ;
    }
    $a->;
}
             Rate  class method   anon   func sealed
class  16393443/s     --   -10%   -32%   -35%   -36%
method 18181818/s    11%     --   -25%   -28%   -29%
anon   24096386/s    47%    33%     --    -5%    -6%
func   25316456/s    54%    39%     5%     --    -1%
sealed 25641026/s    56%    41%     6%     1%     --
ok 1
```

## Proposed Perl 7 solution: `:sealed`  subroutines for typed lexicals

Sample code:

```perl
	use v7.0;
	use Apache2::RequestRec;

	sub handler :sealed {
		my Apache2::RequestRec $r = shift;
		$r->content_type("text/html"); #compile time method lookup
	}
```

## Production-Quality Perl  v5.22+ Prototype: sealed.pm {{ conf.releases.sealed.tag }} (on CPAN)

Compile instructions for perl 5.30+ are available in the `sealed.pm` pod should you want to run mod_perl2 w/ ithreads and httpd-2.4 w/ event mpm, and not segfault ad nauseum at scale.  Tested on `Solaris 11.4` and `Ubuntu 22.04` on amd64.

For fun, try this [monkey patch]({{snippetB.pretty_uri}}) to `ModPerl::RegistryCooker`:

[snippet:repo=SunStarSys/sealed:path=lib/ModPerl/RegistryCookerSealed.pm:lang=apache:lines=83,86]

It enables the effects of `sub handler :Sealed {<script goes here>}` on all of your `ModPerl::Registry` scripts, something like [this one](https://github.com/SunStarSys/sealed/blob/master/enquiry.pl).

```shell
~/src/cms% h2load -n 100000 -c 1000 -m 100 -t 10 http://localhost/perl-script/enquiry.pl\?lang=.es
starting benchmark...
spawning thread #0: 100 total client(s). 10000 total requests
spawning thread #1: 100 total client(s). 10000 total requests
spawning thread #2: 100 total client(s). 10000 total requests
spawning thread #3: 100 total client(s). 10000 total requests
spawning thread #4: 100 total client(s). 10000 total requests
spawning thread #5: 100 total client(s). 10000 total requests
spawning thread #6: 100 total client(s). 10000 total requests
spawning thread #7: 100 total client(s). 10000 total requests
spawning thread #8: 100 total client(s). 10000 total requests
spawning thread #9: 100 total client(s). 10000 total requests
Application protocol: h2c
progress: 10% done
progress: 20% done
progress: 30% done
progress: 40% done
progress: 50% done
progress: 60% done
progress: 70% done
progress: 80% done
progress: 90% done
progress: 100% done

finished in 13.07s, 7652.14 req/s, 11.83MB/s
requests: 100000 total, 100000 started, 100000 done, 100000 succeeded, 0 failed, 0 errored, 0 timeout
status codes: 100000 2xx, 0 3xx, 0 4xx, 0 5xx
traffic: 154.61MB (162119955) total, 566.39KB (579980) headers (space savings 95.47%), 152.30MB (159700000) data
                       min         max         mean         sd        +/- sd
time for request:     5.74ms      12.77s       6.39s       3.61s    58.14%
time for connect:      304us    293.01ms     70.17ms     76.83ms    74.80%
time to 1st byte:     7.86ms       7.87s       3.33s       1.82s    50.40%
req/s           :       7.71      248.17       19.60       28.07    92.70%

```

See <https://github.com/SunStarSys/sealed/blob/master/lib/sealed.pm>. Look for `t/bench.pl` in the parent directory.

This will allow Perl 5 to do the sample code's `content_type` method-lookup at compile time, without causing any back-compat issues or aggrieved CPAN coders, since this feature would target application developers. Not inheritable OO-module authors.

This Perlish idea is gratuitously stolen from [Dylan](https://jim.studt.net/dirm/interim-5.html).  [Read this](https://www.complang.tuwien.ac.at/gergo/papers/load_attr.pdf) for the CPython effort from about a decade ago.

*$Date$*

------------

## Index

{% for d in deps %}
- [{{d.1.headers.title|safe}}]({{d.0}})
{% endfor %}
